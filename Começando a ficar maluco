#include <iostream>
#include <string.h>
#include <stdio.h>
#include <clocale>

using namespace std;

const int MAX_REGISTROS = 100;
const int MAX_NOME = 50;
const int MAX_NASCIMENTO = 12;
const int MAX_TELEFONE = 20;
const int MAX_PAGAMENTO = 30;
const int MAX_CPF = 12; // 11 + '\0'
const int MAX_CODIGO = 20;
const int MAX_SERVICOS_POR_FUNC = 10;
const int MAX_NUMERO_CARTAO_VIP = 100;
const int MAX_SERVICOS_POR_ESTADIA = 10;
const int MAX_ENDERECO = 100;

bool verificadorDeCpf(const char* cpf) {
    if (strlen(cpf) != 11) return false;
    for (int i = 0; i < 11; i++) {
        if (cpf[i] < '0' || cpf[i] > '9') return false;
    }
    return true;
}

void le_string(const char* mensagem, char* destino, int tamanhoEsperado, bool tamanho_exato = false) {
    while (true) {
        cout << mensagem;
        if (fgets(destino, tamanhoEsperado, stdin)) {
            int len = strlen(destino);
            if (len > 0 && destino[len-1] == '\n') destino[len-1] = '\0';
            if (!tamanho_exato || strlen(destino) == tamanhoEsperado-1)
                break;
            cout << "Entrada inválida! ";
            if (tamanho_exato) cout << "Digite exatamente " << (tamanhoEsperado-1) << " caracteres.\n";
        }
    }
}

void le_cpf(const char* mensagem, char* destino) {
    while (true) {
        cout << mensagem;
        if (fgets(destino, MAX_CPF, stdin)) {
            int len = strlen(destino);
            if (len > 0 && destino[len-1] == '\n') destino[len-1] = '\0';
            if (verificadorDeCpf(destino)) break;
            cout << "CPF inválido! Digite exatamente 11 dígitos numéricos.\n";
        }
    }
}

void le_forma_pagamento(char* destino) {
    int opcao = 0;
    char numeroCartao[32];
    while (true) {
        cout << "\nEscolha a forma de pagamento:\n";
        cout << "1. Cartao de Credito\n";
        cout << "2. Cartao de Debito\n";
        cout << "3. PIX\n";
        cout << "4. Dinheiro\n";
        cout << "5. Cartao VIP\n";
        cout << "Digite o numero da opcao: ";
        cin >> opcao;
        cin.ignore();

        if (opcao == 1) {
            cout << "Digite o numero do cartao de credito: ";
            le_string("", numeroCartao, 32);
            strcpy(destino, "Cartao de Credito");
            break;
        } else if (opcao == 2) {
            cout << "Digite o numero do cartao de debito: ";
            le_string("", numeroCartao, 32);
            strcpy(destino, "Cartao de Debito");
            break;
        } else if (opcao == 3) {
            strcpy(destino, "PIX");
            break;
        } else if (opcao == 4) {
            strcpy(destino, "Dinheiro");
            break;
        } else if (opcao == 5) {
            cout << "Digite o numero do cartao VIP: ";
            le_string("", numeroCartao, 32);
            strcpy(destino, "Cartao VIP");
            break;
        } else {
            cout << "Entrada invalida! Digite uma das opcoes disponiveis.\n";
        }
    }
}

class CLIENTE {
public:
    char nome[MAX_NOME];
    char nascimento[MAX_NASCIMENTO];
    char telefone[MAX_TELEFONE];
    char endereco[MAX_ENDERECO];
    char formaPagamento[MAX_PAGAMENTO];
    char cartaoVip[MAX_NUMERO_CARTAO_VIP];
    char cpf_cliente[MAX_CPF];

    void insere_dados(const char* cpf) {
        strcpy(cpf_cliente,cpf);
        cin.ignore();
        le_string("Insira o nome do cliente: ", nome, MAX_NOME);

        while (true) {
            le_string("Insira a data de nascimento (DD/MM/AAAA): ", nascimento, MAX_NASCIMENTO);
            if (strlen(nascimento) == 10 &&
                nascimento[2] == '/' &&
                nascimento[5] == '/') {
                cout << "Data válida: " << nascimento << endl;
                break;
            }
            cout << "Entrada inválida, tente novamente." << endl;
        }

        while (true) {
            le_string("\nInsira o telefone: (8 Digitos) ", telefone, MAX_TELEFONE);
            if (strlen(telefone) == 8) break;
            cout << "Telefone inválido! Digite exatamente 8 dígitos." << endl;
        }

        le_string("\nInsira o endereço: ", endereco, MAX_ENDERECO);

        le_forma_pagamento(formaPagamento);

        char respostaVip;
        while (true) {
            cout << "Cliente Possui cartão VIP? (S/N): ";
            cin >> respostaVip;
            cin.ignore();

            if (respostaVip == 'S' || respostaVip == 's') {
                cout << "Insira o Número do Cartão VIP: ";
                cin.getline(cartaoVip, 50);
                break;
            } else if (respostaVip == 'N' || respostaVip == 'n') {
                strcpy(cartaoVip, "Nenhum");
                break;
            } else {
                cout << "Entrada invalida, tente novamente" << endl;
            }
        }
    }

    void imprime_dados() {
        cout << "\n\nNome: " << nome
             << ", Nascimento: " << nascimento
             << ", Telefone: " << telefone
             << ", Endereço: " << endereco
             << "\nForma de Pagamento: " << formaPagamento
             << ", CPF: " << cpf_cliente
             << ", Número Cartão VIP: " << cartaoVip;
    }

    void imprime_dados_VIP() {
        if (strcmp(cartaoVip, "Nenhum") != 0) {
            imprime_dados();
        }
    }
};

class ESTADIA {
public:
    char cpfCliente[MAX_CPF];
    double valorDiaria;
    double totalAPagar;
    char formaPagamento[MAX_PAGAMENTO];
    char servicosContratados[MAX_SERVICOS_POR_ESTADIA][MAX_CODIGO];
    int qtdServicosContratados;

    void insere_dados(const char* cpfClienteOrigem, const char* formaPagamentoOrigem) {
        strcpy(cpfCliente, cpfClienteOrigem);
        strcpy(formaPagamento, formaPagamentoOrigem);

        cout << "Forma de pagamento já cadastrada para este cliente: " << formaPagamento << endl;
        cout << "Insira o valor da diária: ";
        cin >> valorDiaria;
        cin.ignore();
        cout << "Insira o total a pagar: ";
        cin >> totalAPagar;
        cin.ignore();
        qtdServicosContratados = 0;
    }
    void inserirServico(const char* codigoServico) {
        if (qtdServicosContratados < MAX_SERVICOS_POR_ESTADIA) {
            strcpy(servicosContratados[qtdServicosContratados], codigoServico);
            qtdServicosContratados++;
            cout << "\nServico adicionado com sucesso a estadia!\n";
        } else {
            cout << "\nLimite de servicos para esta estadia foi atingido!\n";
        }
    }
    void imprime_dados() {
        cout << "\nCPF do Cliente: " << cpfCliente
             << ", Valor Diaria: " << valorDiaria
             << ", Total a Pagar: " << totalAPagar
             << ", Forma de Pagamento: " << formaPagamento;
        cout << "\nServicos Contratados: ";
        if (qtdServicosContratados == 0) {
            cout << "Nenhum";
        } else {
            for (int i = 0; i < qtdServicosContratados; i++) {
                cout << servicosContratados[i] << " ";
            }
        }
    }
};

class SERVICO {
public:
    char codigo[MAX_CODIGO];
    char cpfFuncionario[MAX_CPF];
    double valorCusto;
    double valorPrestacao;
    char executadoPor[MAX_NOME];

    void insere_dados(const char* cpf) {
        strcpy(cpfFuncionario, cpf);
        le_string("Insira o código do serviço: ", codigo, MAX_CODIGO);
        cout << "Insira o valor de custo: ";
        cin >> valorCusto;
        cin.ignore();
        cout << "Insira o valor de prestacao: ";
        cin >> valorPrestacao;
        cin.ignore();
        le_string("Nome do responsável pela execução: ", executadoPor, MAX_NOME);
    }

    void imprime_dados() {
        cout << "\nCódigo: " << codigo
             << ", Funcionario Responsavel: " << cpfFuncionario
             << ", Valor Custo: " << valorCusto
             << ", Valor Prestacao: " << valorPrestacao
             << ", Executado por: " << executadoPor;
    }

    double calcularLucro() {
        return valorPrestacao - valorCusto;
    }
};

class FUNCIONARIO {
public:
    char nome[MAX_NOME];
    char cpf[MAX_CPF];
    char servicosRealizados[MAX_SERVICOS_POR_FUNC][MAX_CODIGO];
    int qtdServicosRealizados;

    void insere_dados() {
        le_string("Insira o Nome do funcionário: ", nome, MAX_NOME);
        le_cpf("Insira o CPF do funcionário: ", cpf);
        qtdServicosRealizados = 0;
    }
    void servicosRealizadosFunc(const char* codigoServico) {
        if (qtdServicosRealizados < MAX_SERVICOS_POR_FUNC) {
            strcpy(servicosRealizados[qtdServicosRealizados], codigoServico);
            qtdServicosRealizados++;
        }
    }

    void imprime_dados() {
        cout << "\nNome: " << nome;
        cout << "\nCPF: " << cpf;
        cout << "\nServiços Realizados: ";
        if (qtdServicosRealizados == 0) {
            cout << "Nenhum";
        } else {
            for (int i = 0; i < qtdServicosRealizados; i++) {
                cout << servicosRealizados[i] << " ";
            }
        }
    }
};

class GERENCIADOR {
public:
    CLIENTE clientes[MAX_REGISTROS];
    int qtd_clientes;

    ESTADIA estadias[MAX_REGISTROS];
    int qtd_estadias;

    SERVICO servicos[MAX_REGISTROS];
    int qtd_servicos;

    FUNCIONARIO funcionarios[MAX_REGISTROS];
    int qtd_funcionarios;

    void cadastrarCliente() {
        char cpf[MAX_CPF];
        bool jaExiste = false;
        le_cpf("Insira o CPF do cliente: ", cpf);
        for(int i=0; i<qtd_clientes; i++){
            if(strcmp(cpf,clientes[i].cpf_cliente)==0){
                jaExiste = true;
                break;
            }
        }
        if(jaExiste){
            cout << "CPF já Cadastrado!\n";
        }
        else if (qtd_clientes < MAX_REGISTROS) {
            clientes[qtd_clientes].insere_dados(cpf);
            qtd_clientes++;
            cout << "Cliente cadastrado com sucesso!\n";
        } else {
            cout << "Limite de clientes atingido!\n";
        }
    }

    void cadastrarEstadia() {
        if (qtd_estadias >= MAX_REGISTROS) {
            cout << "Limite de estadias atingido!\n";
            return;
        }
        char cpfCliente[MAX_CPF];
        le_cpf("Insira o CPF do cliente da estadia: ", cpfCliente);
        int indiceCliente = -1;
        for (int i = 0; i < qtd_clientes; i++) {
            if(strcmp(clientes[i].cpf_cliente, cpfCliente) == 0) {
                indiceCliente = i;
                break;
            }
        }
        if (indiceCliente == -1) {
            cout << "Cliente não cadastrado. Não é possível registrar estadia.\n";
            return;
        }
        // Pega forma de pagamento do cliente automaticamente
        estadias[qtd_estadias].insere_dados(cpfCliente, clientes[indiceCliente].formaPagamento);
        qtd_estadias++;
        cout << "Estadia cadastrada com sucesso!\n";
    }

    void cadastrarServico() {
        char cpf[MAX_CPF];
        int indiceFuncionario = -1;

        if (qtd_funcionarios == 0) {
            cout << "\nERRO: Nenhum funcionario cadastrado para associar a um servico.\n";
            return;
        }

        cout << "\n--- Designar Servico a um Funcionario ---\n";
        le_cpf("Digite o CPF do funcionario responsavel: ", cpf);

        indiceFuncionario = procurarFuncionarioPorCPF(cpf);

        if(indiceFuncionario != -1){
            if (qtd_servicos < MAX_REGISTROS) {
                servicos[qtd_servicos].insere_dados(funcionarios[indiceFuncionario].cpf);
                funcionarios[indiceFuncionario].servicosRealizadosFunc(servicos[qtd_servicos].codigo);
                qtd_servicos++;
                cout << "Serviço cadastrado com sucesso e associado ao funcionario!\n";
            } else {
                cout << "Limite de serviços atingido!\n";
            }
        } else {
            cout << "Funcionario com o CPF " << cpf << " nao encontrado. O servico nao pode ser cadastrado.\n";
        }
    }

    void cadastrarFuncionario() {
        if (qtd_funcionarios < MAX_REGISTROS) {
            funcionarios[qtd_funcionarios].insere_dados();
            qtd_funcionarios++;
            cout << "Funcionário cadastrado com sucesso!\n";
        } else {
            cout << "Limite de funcionários atingido!\n";
        }
    }

    void listarClientes() {
        cout << "\n--- Lista de Clientes ---";
        if (qtd_clientes == 0) {
            cout << "\nNenhum cliente cadastrado.";
        }
        for (int i = 0; i < qtd_clientes; i++) {
            clientes[i].imprime_dados();
        }
        cout << "\n--------------------------\n";
    }

    void listarEstadias() {
        cout << "\n--- Lista de Estadias ---";
        if (qtd_estadias == 0) {
            cout << "\nNenhuma estadia cadastrada.";
        }
        for (int i = 0; i < qtd_estadias; i++) {
            estadias[i].imprime_dados();
        }
        cout << "\n-------------------------\n";
    }

    void listarServicos() {
        cout << "\n--- Lista de Serviços ---";
        if (qtd_servicos == 0) {
            cout << "\nNenhum serviço cadastrado.";
        }
        for (int i = 0; i < qtd_servicos; i++) {
            servicos[i].imprime_dados();
        }
        cout << "\n-------------------------\n";
    }

    void procurarClientesCpf() {
        char cpf_cliente[MAX_CPF], aux[MAX_CPF];
        bool encontrei=false;
        cout << "\n--- Procurar de Clientes ---";
        if (qtd_clientes == 0) {
            cout << "\nNenhum cliente cadastrado.";
            cout << "\n--------------------------\n";
            return;
        }
        le_cpf("\nDigite o CPF a ser procurado: ", cpf_cliente);
        for (int i = 0; i < qtd_clientes; i++) {
            strcpy(aux,clientes[i].cpf_cliente);
            if(strcmp(cpf_cliente,aux)==0){
                clientes[i].imprime_dados();
                encontrei=true;
                break;
            }
        }
        if(encontrei==false){
            cout<<"\nUsuario nao encontrado";
        }
        cout << "\n--------------------------\n";
    }

    void procurarServicos() {
        char codigoBusca[MAX_CODIGO];
        int indiceServico;
        cout << "\n--- Procurar Serviços ---";
        if (qtd_servicos == 0) {
            cout << "\nNenhum Serviço cadastrado.";
            cout << "\n--------------------------\n";
            return;
        }
        le_string("\nDigite o codigo do serviço a ser procurado: ", codigoBusca, MAX_CODIGO);

        indiceServico = procurarServicoPorCodigo(codigoBusca);

        if(indiceServico != -1) {
            servicos[indiceServico].imprime_dados();
        } else {
            cout<<"\nServiço nao encontrado";
        }
        cout << "\n--------------------------\n";
    }

    void procurarFuncionariosCpf(char cpf[MAX_CPF],char aux[MAX_CPF],bool &encontrei) {
        for (int i = 0; i < qtd_funcionarios; i++) {
            strcpy(aux,funcionarios[i].cpf);
            if(strcmp(cpf,aux)==0){
                encontrei=true;
                break;
            }
        }
        if(encontrei==false){
            cout<<"\nFuncionário nao encontrado";
        }
    }

    void listarFuncionarios() {
        cout << "\n--- Lista de Funcionários ---";
        if (qtd_funcionarios == 0) {
            cout << "\nNenhum funcionário cadastrado.";
        }
        for (int i = 0; i < qtd_funcionarios; i++) {
            funcionarios[i].imprime_dados();
        }
        cout << "\n-----------------------------\n";
    }

    void listarClientesVIP() {
        cout << "\n--- Lista de Clientes VIP---";
        if (qtd_clientes == 0) {
            cout << "\nNenhum cliente cadastrado.";
        }
        int contVip = 0;
        for (int i = 0; i < qtd_clientes; i++) {
            if (strcmp(clientes[i].cartaoVip, "Nenhum") != 0) {
                clientes[i].imprime_dados_VIP();
                contVip++;
            }
        }
        if (contVip == 0 && qtd_clientes > 0) {
            cout << "\nNenhum cliente VIP encontrado.";
        }
        cout << "\n--------------------------\n";
    }

    void inserirServicoEstadia() {
        if (qtd_estadias == 0 || qtd_servicos == 0) {
            cout << "\nERRO: E necessario ter pelo menos uma estadia e um servico cadastrado.\n";
            return;
        }

        char cpfBusca[MAX_CPF];
        char codigoBusca[MAX_CODIGO];
        int indiceEstadia, indiceServico, indiceFuncionario;

        cout << "\n--- Adicionar Servico a uma Estadia ---";
        le_cpf("\nDigite o CPF do cliente da estadia: ", cpfBusca);

        indiceEstadia = procurarEstadiaPorCPF(cpfBusca);

        if (indiceEstadia == -1) {
            cout << "\nEstadia nao encontrada para o CPF informado.\n";
            return;
        }

        cout << "\nEstadia encontrada:";
        estadias[indiceEstadia].imprime_dados();
        cout << "\n----------------------------------\n";

        le_string("\nDigite o codigo do servico que deseja adicionar: ", codigoBusca, MAX_CODIGO);

        indiceServico = procurarServicoPorCodigo(codigoBusca);

        if (indiceServico == -1) {
            cout << "\nServico nao encontrado com o codigo informado.\n";
            return;
        }

        cout << "\nServico encontrado:";
        servicos[indiceServico].imprime_dados();

        indiceFuncionario = procurarFuncionarioPorCPF(servicos[indiceServico].cpfFuncionario);

        if (indiceFuncionario == -1) {
            cout << "\nALERTA: O funcionario responsavel (CPF: " << servicos[indiceServico].cpfFuncionario
                 << ") nao foi encontrado no sistema.";
        } else {
            cout << "\nFuncionario responsavel encontrado:";
            funcionarios[indiceFuncionario].imprime_dados();
        }
        cout << "\n----------------------------------\n";

        char resposta;
        cout << "\nDeseja adicionar o servico '" << servicos[indiceServico].codigo
             << "' (executado por " << servicos[indiceServico].executadoPor << ")"
             << " a estadia do cliente CPF '" << estadias[indiceEstadia].cpfCliente << "'? (S/N): ";
        cin >> resposta;
        cin.ignore();

        if (resposta == 'S' || resposta == 's') {
            estadias[indiceEstadia].inserirServico(servicos[indiceServico].codigo);
            if (indiceFuncionario != -1) {
                funcionarios[indiceFuncionario].servicosRealizadosFunc(servicos[indiceServico].codigo);
            }
        } else {
            cout << "\nOperacao cancelada.\n";
        }
    }

    int procurarEstadiaPorCPF(char cpfBusca[]) {
        for (int i = 0; i < qtd_estadias; i++) {
            if (strcmp(cpfBusca, estadias[i].cpfCliente) == 0) {
                return i;
            }
        }
        return -1;
    }

    int procurarServicoPorCodigo(char codigoBusca[]) {
        for (int i = 0; i < qtd_servicos; i++) {
            if (strcmp(codigoBusca, servicos[i].codigo) == 0) {
                return i;
            }
        }
        return -1;
    }

    int procurarFuncionarioPorCPF(char cpfBusca[]) {
        for (int i = 0; i < qtd_funcionarios; i++) {
            if (strcmp(cpfBusca, funcionarios[i].cpf) == 0) {
                return i;
            }
        }
        return -1;
    }

    void cadastroTeste() {
        cout << "\n--- Iniciando Cadastro de Teste ---\n";
        strcpy(clientes[qtd_clientes].cpf_cliente, "12345678901");
        strcpy(clientes[qtd_clientes].nome, "Joao Silva");
        strcpy(clientes[qtd_clientes].nascimento, "10/05/1990");
        strcpy(clientes[qtd_clientes].telefone, "31998877");
        strcpy(clientes[qtd_clientes].endereco, "Serra do Leme Frio");
        strcpy(clientes[qtd_clientes].formaPagamento, "Cartao de Credito");
        strcpy(clientes[qtd_clientes].cartaoVip, "VIP12345");
        qtd_clientes++;

        strcpy(clientes[qtd_clientes].cpf_cliente, "23456789012");
        strcpy(clientes[qtd_clientes].nome, "Maria Oliveira");
        strcpy(clientes[qtd_clientes].nascimento, "22/08/1985");
        strcpy(clientes[qtd_clientes].telefone, "31988776");
        strcpy(clientes[qtd_clientes].endereco, "Pontal de Matheus Neves");
        strcpy(clientes[qtd_clientes].formaPagamento, "PIX");
        strcpy(clientes[qtd_clientes].cartaoVip, "Nenhum");
        qtd_clientes++;

        strcpy(clientes[qtd_clientes].cpf_cliente, "34567890123");
        strcpy(clientes[qtd_clientes].nome, "Pedro Souza");
        strcpy(clientes[qtd_clientes].nascimento, "15/11/2000");
        strcpy(clientes[qtd_clientes].telefone, "31977665");
        strcpy(clientes[qtd_clientes].endereco, "Montes de Ribeirão Leopoldo");
        strcpy(clientes[qtd_clientes].formaPagamento, "Dinheiro");
        strcpy(clientes[qtd_clientes].cartaoVip, "VIP98765");
        qtd_clientes++;
        cout << "3 clientes de teste cadastrados com sucesso!\n";

        strcpy(funcionarios[qtd_funcionarios].cpf, "45678901234");
        strcpy(funcionarios[qtd_funcionarios].nome, "Carlos Pereira");
        funcionarios[qtd_funcionarios].qtdServicosRealizados = 0;
        qtd_funcionarios++;

        strcpy(funcionarios[qtd_funcionarios].cpf, "56789012345");
        strcpy(funcionarios[qtd_funcionarios].nome, "Ana Costa");
        funcionarios[qtd_funcionarios].qtdServicosRealizados = 0;
        qtd_funcionarios++;

        strcpy(funcionarios[qtd_funcionarios].cpf, "67890123456");
        strcpy(funcionarios[qtd_funcionarios].nome, "Lucas Martins");
        funcionarios[qtd_funcionarios].qtdServicosRealizados = 0;
        qtd_funcionarios++;
        cout << "3 funcionarios de teste cadastrados com sucesso!\n";

        strcpy(servicos[qtd_servicos].codigo, "S001");
        strcpy(servicos[qtd_servicos].cpfFuncionario, "45678901234");
        servicos[qtd_servicos].valorCusto = 50.0;
        servicos[qtd_servicos].valorPrestacao = 120.0;
        strcpy(servicos[qtd_servicos].executadoPor, "Carlos Pereira");
        funcionarios[0].servicosRealizadosFunc(servicos[qtd_servicos].codigo);
        qtd_servicos++;

        strcpy(servicos[qtd_servicos].codigo, "S002");
        strcpy(servicos[qtd_servicos].cpfFuncionario, "56789012345");
        servicos[qtd_servicos].valorCusto = 25.0;
        servicos[qtd_servicos].valorPrestacao = 60.0;
        strcpy(servicos[qtd_servicos].executadoPor, "Ana Costa");
        funcionarios[1].servicosRealizadosFunc(servicos[qtd_servicos].codigo);
        qtd_servicos++;

        strcpy(servicos[qtd_servicos].codigo, "S003");
        strcpy(servicos[qtd_servicos].cpfFuncionario, "67890123456");
        servicos[qtd_servicos].valorCusto = 80.0;
        servicos[qtd_servicos].valorPrestacao = 150.0;
        strcpy(servicos[qtd_servicos].executadoPor, "Lucas Martins");
        funcionarios[2].servicosRealizadosFunc(servicos[qtd_servicos].codigo);
        qtd_servicos++;
        cout << "3 servicos de teste cadastrados com sucesso!\n";

        cout << "--- Cadastro de Teste Finalizado ---\n\n";
    }
};

int main() {
    setlocale(LC_ALL,"Portuguese");
    GERENCIADOR meuHotel;
    meuHotel.qtd_clientes = 0;
    meuHotel.qtd_estadias = 0;
    meuHotel.qtd_servicos = 0;
    meuHotel.qtd_funcionarios = 0;

    int opcao;

    do {
        cout << "\nMenu Principal:\n";
        cout << "1. Cadastrar Cliente\n";
        cout << "2. Cadastrar Estadia\n";
        cout << "3. Cadastrar Servico\n";
        cout << "4. Cadastrar Funcionario\n";
        cout << "5. Listar Clientes\n";
        cout << "6. Listar Estadias\n";
        cout << "7. Listar Servicos\n";
        cout << "8. Listar Funcionarios\n";
        cout << "9. Listar Clientes VIP\n";
        cout << "10. Procurar Clientes por CPF\n";
        cout << "11. Procurar Serviços por Codigo\n";
        cout << "12. Inserir Serviço na estadia\n";
        cout << "13. Cadastro para Teste\n";
        cout << "14. Sair\n";
        cout << "Escolha uma opcao: ";
        cin >> opcao;
        cin.ignore();

        if (opcao == 1) {
            meuHotel.cadastrarCliente();
        } else if (opcao == 2) {
            meuHotel.cadastrarEstadia();
        } else if (opcao == 3) {
            meuHotel.cadastrarServico();
        } else if (opcao == 4) {
            meuHotel.cadastrarFuncionario();
        } else if (opcao == 5) {
            meuHotel.listarClientes();
        } else if (opcao == 6) {
            meuHotel.listarEstadias();
        } else if (opcao == 7) {
            meuHotel.listarServicos();
        } else if (opcao == 8) {
            meuHotel.listarFuncionarios();
        } else if (opcao == 9) {
            meuHotel.listarClientesVIP();
        } else if (opcao == 10) {
            meuHotel.procurarClientesCpf();
        } else if (opcao == 11) {
            meuHotel.procurarServicos();
        } else if (opcao == 12) {
            meuHotel.inserirServicoEstadia();
        } else if (opcao == 13) {
            meuHotel.cadastroTeste();
        } else if (opcao == 14) {
            cout << "Saindo...\n";
        } else {
            cout << "Opção inválida, tente novamente.\n";
            cin.clear();
            cin.ignore();
        }

    } while (opcao != 14);

    return 0;
}


#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Classe para Cliente
class Cliente {
public:
    string nome;
    string nascimento;
    string telefone;
    string formaPagamento;

    Cliente(string nome, string nascimento, string telefone, string formaPagamento)
        : nome(nome), nascimento(nascimento), telefone(telefone), formaPagamento(formaPagamento) {}
};

// Classe para Estadia
class Estadia {
public:
    string cpfCliente;
    double valorDiaria;
    double totalAPagar;
    string formaPagamento;

    Estadia(string cpfCliente, double valorDiaria, double totalAPagar, string formaPagamento)
        : cpfCliente(cpfCliente), valorDiaria(valorDiaria), totalAPagar(totalAPagar), formaPagamento(formaPagamento) {}
};

// Classe para Serviço
class Servico {
public:
    string codigo;
    double valorCusto;
    double valorPrestacao;
    string executadoPor;

    Servico(string codigo, double valorCusto, double valorPrestacao, string executadoPor)
        : codigo(codigo), valorCusto(valorCusto), valorPrestacao(valorPrestacao), executadoPor(executadoPor) {}

    double calcularLucro() const {
        return valorPrestacao - valorCusto;
    }
};

// Classe para Funcionário
class Funcionario {
public:
    string cpf;
    vector<string> servicosRealizados;

    Funcionario(string cpf) : cpf(cpf) {}

    void adicionarServico(const string& servico) {
        servicosRealizados.push_back(servico);
    }
};

// Funções de Cadastro
void cadastrarCliente(vector<Cliente>& clientes) {
    string nome, nascimento, telefone, formaPagamento;
    cout << "Insira o nome do cliente: ";
    cin.ignore();
    getline(cin, nome);
    cout << "Insira a data de nascimento: ";
    getline(cin, nascimento);
    cout << "Insira o telefone: ";
    getline(cin, telefone);
    cout << "Insira a forma de pagamento: ";
    getline(cin, formaPagamento);

    clientes.push_back(Cliente(nome, nascimento, telefone, formaPagamento));
    cout << "Cliente cadastrado com sucesso!\n";
}

void cadastrarEstadia(vector<Estadia>& estadias) {
    string cpfCliente, formaPagamento;
    double valorDiaria, totalAPagar;
    cout << "Insira o CPF do cliente: ";
    cin.ignore();
    getline(cin, cpfCliente);
    cout << "Insira o valor da diária: ";
    cin >> valorDiaria;
    cout << "Insira o total a pagar: ";
    cin >> totalAPagar;
    cin.ignore();
    cout << "Insira a forma de pagamento: ";
    getline(cin, formaPagamento);

    estadias.push_back(Estadia(cpfCliente, valorDiaria, totalAPagar, formaPagamento));
    cout << "Estadia cadastrada com sucesso!\n";
}

void cadastrarServico(vector<Servico>& servicos) {
    string codigo, executadoPor;
    double valorCusto, valorPrestacao;
    cout << "Insira o código do serviço: ";
    cin.ignore();
    getline(cin, codigo);
    cout << "Insira o valor de custo: ";
    cin >> valorCusto;
    cout << "Insira o valor de prestação: ";
    cin >> valorPrestacao;
    cin.ignore();
    cout << "Nome do responsável pela execução: ";
    getline(cin, executadoPor);

    servicos.push_back(Servico(codigo, valorCusto, valorPrestacao, executadoPor));
    cout << "Serviço cadastrado com sucesso!\n";
}

void cadastrarFuncionario(vector<Funcionario>& funcionarios) {
    string cpf;
    cout << "Insira o CPF do funcionário: ";
    cin.ignore();
    getline(cin, cpf);

    funcionarios.push_back(Funcionario(cpf));
    cout << "Funcionário cadastrado com sucesso!\n";
}

// Funções de Listagem
void listarClientes(const vector<Cliente>& clientes) {
    cout << "Lista de Clientes:\n";
    for (const auto& cliente : clientes) {
        cout << "Nome: " << cliente.nome
                  << ", Nascimento: " << cliente.nascimento
                  << ", Telefone: " << cliente.telefone
                  << ", Forma de Pagamento: " << cliente.formaPagamento << "\n";
    }
}

void listarEstadias(const vector<Estadia>& estadias) {
    cout << "Lista de Estadias:\n";
    for (const auto& estadia : estadias) {
        cout << "CPF do Cliente: " << estadia.cpfCliente
                  << ", Valor Diaria: " << estadia.valorDiaria
                  << ", Total a Pagar: " << estadia.totalAPagar
                  << ", Forma de Pagamento: " << estadia.formaPagamento << "\n";
    }
}

void listarServicos(const vector<Servico>& servicos) {
    cout << "Lista de Serviços:\n";
    for (const auto& servico : servicos) {
        cout << "Código: " << servico.codigo
                  << ", Valor Custo: " << servico.valorCusto
                  << ", Valor Prestacao: " << servico.valorPrestacao
                  << ", Executado por: " << servico.executadoPor << "\n";
    }
}

void listarFuncionarios(const vector<Funcionario>& funcionarios) {
    cout << "Lista de Funcionários:\n";
    for (const auto& funcionario : funcionarios) {
        cout << "CPF: " << funcionario.cpf << "\n";
        cout << "Serviços Realizados: ";
        for (const auto& servico : funcionario.servicosRealizados) {
            cout << servico << " ";
        }
        cout << "\n";
    }
}

int main() {
    vector<Cliente> clientes;
    vector<Estadia> estadias;
    vector<Servico> servicos;
    vector<Funcionario> funcionarios;
    int opcao;

    do {
        cout << "\nMenu Principal:\n";
        cout << "1. Cadastrar Cliente\n";
        cout << "2. Cadastrar Estadia\n";
        cout << "3. Cadastrar Servico\n";
        cout << "4. Cadastrar Funcionario\n";
        cout << "5. Listar Clientes\n";
        cout << "6. Listar Estadias\n";
        cout << "7. Listar Serviços\n";
        cout << "8. Listar Funcionários\n";
        cout << "9. Sair\n";
        cout << "Escolha uma opção: ";
        cin >> opcao;

        switch (opcao) {
            case 1:
                cadastrarCliente(clientes);
                break;
            case 2:
                cadastrarEstadia(estadias);
                break;
            case 3:
                cadastrarServico(servicos);
                break;
            case 4:
                cadastrarFuncionario(funcionarios);
                break;
            case 5:
                listarClientes(clientes);
                break;
            case 6:
                listarEstadias(estadias);
                break;
            case 7:
                listarServicos(servicos);
                break;
            case 8:
                listarFuncionarios(funcionarios);
                break;
            case 9:
                cout << "Saindo...\n";
                break;
            default:
                cout << "Opção inválida, tente novamente.\n";
        }
    } while (opcao != 9);

    return 0;
}
